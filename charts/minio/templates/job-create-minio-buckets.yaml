apiVersion: batch/v1
kind: Job
metadata:
  name: create-minio-buckets
  labels:
    app: minio
    component: minio
spec:
  template:
    metadata:
      labels:
        app: minio
        component: minio
    spec:
      serviceAccountName: demo-setup
      restartPolicy: Never
      initContainers:
        - name: wait-for-minio
          image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              echo -n 'Waiting for minio root user secret'
              while ! oc get secret minio-root-user 2>/dev/null | grep -qF minio-root-user; do
                echo -n .
                sleep 5
              done; echo

              echo -n 'Waiting for minio deployment'
              while ! oc get deployment minio 2>/dev/null | grep -qF minio; do
                echo -n .
                sleep 5
              done; echo
              oc wait --for=condition=available --timeout=60s deployment/minio
              sleep 10
      containers:
        - name: create-buckets
          image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/s2i-generic-data-science-notebook:2024.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: minio-root-user
          command:
            - /bin/bash
          args:
            - -ec
            - |
              oc get secret minio-root-user
              env | grep MINIO
              cat << 'EOF' | python3
              import boto3, os, base64

              access_key = base64.b64decode(os.getenv("MINIO_ROOT_USER")).decode()
              secret_key = base64.b64decode(os.getenv("MINIO_ROOT_PASSWORD")).decode()

              s3 = boto3.client("s3",
                                endpoint_url="http://minio:9000",
                                aws_access_key_id=access_key,
                                aws_secret_access_key=secret_key)
              for bucket in {{ toJson .Values.buckets }}:
                  print(f'creating {bucket} bucket')
                  if bucket not in [bu["Name"] for bu in s3.list_buckets()["Buckets"]]:
                      s3.create_bucket(Bucket=bucket)
              EOF
