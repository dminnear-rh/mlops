# PIPELINE DEFINITION
# Name: train-upload-model
components:
  comp-get-data:
    executorLabel: exec-get-data
    outputDefinitions:
      artifacts:
        train_data_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        validate_data_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        train_data_input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        validate_data_input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-upload-model:
    executorLabel: exec-upload-model
    inputDefinitions:
      artifacts:
        input_model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-get-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - get_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.5.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef get_data(\n    train_data_output_path: OutputPath(), validate_data_output_path:\
          \ OutputPath()\n):\n    import urllib.request\n\n    print(\"starting download...\"\
          )\n    print(\"downloading training data\")\n    url = \"https://raw.githubusercontent.com/rh-aiservices-bu/fraud-detection/main/data/train.csv\"\
          \n    urllib.request.urlretrieve(url, train_data_output_path)\n    print(\"\
          train data downloaded\")\n    print(\"downloading validation data\")\n \
          \   url = \"https://raw.githubusercontent.com/rh-aiservices-bu/fraud-detection/main/data/validate.csv\"\
          \n    urllib.request.urlretrieve(url, validate_data_output_path)\n    print(\"\
          validation data downloaded\")\n\n"
        image: quay.io/modh/runtime-images:runtime-cuda-tensorflow-ubi9-python-3.9-2024a-20240523
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.5.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'onnx==1.17.0'\
          \ 'onnxruntime==1.19.2' 'tf2onnx==1.16.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    train_data_input_path: InputPath(),\n    validate_data_input_path:\
          \ InputPath(),\n    model_output_path: OutputPath(),\n):\n    # This version\
          \ builds a large network (4096 units per layer) in float64 to\n    # force\
          \ high memory usage during training.\n\n    import pickle\n    from pathlib\
          \ import Path\n\n    import numpy as np\n    import onnx\n    import pandas\
          \ as pd\n    import tensorflow as tf\n    import tf2onnx\n    from keras.layers\
          \ import Activation, BatchNormalization, Dense, Dropout, Input\n    from\
          \ keras.models import Sequential\n    from sklearn.preprocessing import\
          \ StandardScaler\n    from sklearn.utils import class_weight\n\n    # Use\
          \ float64 to double tensor size\n    tf.keras.backend.set_floatx(\"float64\"\
          )\n\n    # Columns: 0..6 are features, 7 is the label\n    feature_indexes\
          \ = list(range(7))\n    label_indexes = [7]\n\n    # Load data\n    X_train_df\
          \ = pd.read_csv(train_data_input_path)\n    y_train_df = X_train_df.iloc[:,\
          \ label_indexes]\n    X_train_df = X_train_df.iloc[:, feature_indexes]\n\
          \n    X_val_df = pd.read_csv(validate_data_input_path)\n    y_val_df = X_val_df.iloc[:,\
          \ label_indexes]\n    X_val_df = X_val_df.iloc[:, feature_indexes]\n\n \
          \   # Scale features\n    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train_df.values).astype(\"\
          float64\")\n    X_val = scaler.transform(X_val_df.values).astype(\"float64\"\
          )\n\n    Path(\"artifact\").mkdir(parents=True, exist_ok=True)\n    pickle.dump(scaler,\
          \ open(\"artifact/scaler.pkl\", \"wb\"))\n\n    # Class weights for imbalance\n\
          \    cw = class_weight.compute_class_weight(\n        \"balanced\", classes=np.unique(y_train_df),\
          \ y=y_train_df.values.ravel()\n    )\n    class_weights = {i: w for i, w\
          \ in enumerate(cw)}\n\n    # Build a large fully connected network\n   \
          \ UNITS = 4096\n    model = Sequential(\n        [\n            Input(shape=(len(feature_indexes),),\
          \ dtype=\"float64\"),\n            Dense(UNITS, activation=\"relu\"),\n\
          \            Dropout(0.3),\n            Dense(UNITS),\n            BatchNormalization(),\n\
          \            Activation(\"relu\"),\n            Dropout(0.3),\n        \
          \    Dense(UNITS),\n            BatchNormalization(),\n            Activation(\"\
          relu\"),\n            Dropout(0.3),\n            Dense(UNITS),\n       \
          \     BatchNormalization(),\n            Activation(\"relu\"),\n       \
          \     Dropout(0.3),\n            Dense(1, activation=\"sigmoid\"),\n   \
          \     ]\n    )\n\n    model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\"\
          , metrics=[\"accuracy\"])\n    model.summary()\n\n    model.fit(\n     \
          \   X_train,\n        y_train_df,\n        epochs=2,\n        validation_data=(X_val,\
          \ y_val_df),\n        verbose=2,\n        class_weight=class_weights,\n\
          \    )\n\n    # Export to ONNX\n    spec = (\n        tf.TensorSpec((None,\
          \ len(feature_indexes)), tf.float64, name=\"dense_input\"),\n    )\n   \
          \ model_proto, _ = tf2onnx.convert.from_keras(model, input_signature=spec,\
          \ opset=13)\n    onnx.save(model_proto, model_output_path)\n\n"
        image: quay.io/modh/runtime-images:runtime-cuda-tensorflow-ubi9-python-3.9-2024a-20240523
    exec-upload-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.5.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3==1.35.55'\
          \ 'botocore==1.35.55' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model(input_model_path: InputPath()):\n    import os\n\
          \n    import boto3\n    import botocore\n\n    aws_access_key_id = os.environ.get(\"\
          AWS_ACCESS_KEY_ID\")\n    aws_secret_access_key = os.environ.get(\"AWS_SECRET_ACCESS_KEY\"\
          )\n    endpoint_url = os.environ.get(\"AWS_S3_ENDPOINT\")\n    region_name\
          \ = os.environ.get(\"AWS_DEFAULT_REGION\")\n    bucket_name = os.environ.get(\"\
          AWS_S3_BUCKET\")\n\n    s3_key = os.environ.get(\"S3_KEY\")\n\n    session\
          \ = boto3.session.Session(\n        aws_access_key_id=aws_access_key_id,\
          \ aws_secret_access_key=aws_secret_access_key\n    )\n\n    s3_resource\
          \ = session.resource(\n        \"s3\",\n        config=botocore.client.Config(signature_version=\"\
          s3v4\"),\n        endpoint_url=endpoint_url,\n        region_name=region_name,\n\
          \    )\n\n    bucket = s3_resource.Bucket(bucket_name)\n\n    print(f\"\
          Uploading {s3_key}\")\n    bucket.upload_file(input_model_path, s3_key)\n\
          \n"
        env:
        - name: S3_KEY
          value: models/fraud/1/model.onnx
        image: quay.io/modh/runtime-images:runtime-cuda-tensorflow-ubi9-python-3.9-2024a-20240523
pipelineInfo:
  name: train-upload-model
root:
  dag:
    tasks:
      get-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-get-data
        taskInfo:
          name: get-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - get-data
        inputs:
          artifacts:
            train_data_input_path:
              taskOutputArtifact:
                outputArtifactKey: train_data_output_path
                producerTask: get-data
            validate_data_input_path:
              taskOutputArtifact:
                outputArtifactKey: validate_data_output_path
                producerTask: get-data
        taskInfo:
          name: train-model
      upload-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-model
        dependentTasks:
        - train-model
        inputs:
          artifacts:
            input_model_path:
              taskOutputArtifact:
                outputArtifactKey: model_output_path
                producerTask: train-model
        taskInfo:
          name: upload-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.5.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-upload-model:
          secretAsEnv:
          - keyToEnv:
            - envVar: AWS_ACCESS_KEY_ID
              secretKey: AWS_ACCESS_KEY_ID
            - envVar: AWS_SECRET_ACCESS_KEY
              secretKey: AWS_SECRET_ACCESS_KEY
            - envVar: AWS_DEFAULT_REGION
              secretKey: AWS_DEFAULT_REGION
            - envVar: AWS_S3_BUCKET
              secretKey: AWS_S3_BUCKET
            - envVar: AWS_S3_ENDPOINT
              secretKey: AWS_S3_ENDPOINT
            secretName: aws-connection-my-storage
